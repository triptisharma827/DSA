 It is a linear data structure. An array is a collection of homogeneous data types where the elements are allocated contiguous memory. Because of the contiguous allocation of memory, any element of an array can be accessed in constant time. Each array element has a corresponding index number. 

The base value is index 0 and the difference between the two indexes is the offset.


Is the array always of fixed size?
In C language, the array has a fixed size meaning once the size is given to it, it cannot be changed i.e. you can’t shrink it nor can you expand it. The reason was that for expanding if we change the size we can’t be sure ( it’s not possible every time) that we get the next memory location to us for free. The shrinking will not work because the array, when declared, gets memory statically allocated, and thus compiler is the only one that can destroy it.


Types of indexing in an array: 
• 0 (zero-based indexing): The first element of the array is indexed by a subscript of 0.
• 1 (one-based indexing): The first element of the array is indexed by the subscript of 1.
• n (N-based indexing): The base index of an array can be freely chosen. Usually, programming languages allowing n-based indexing also allow negative index values, and other scalar data types like enumerations, or characters may be used as an array index.

How an Array is initialized?
By default the array is uninitialized, and no elements of the array are set to any value.
Array initialization can be done by the following methods:
1. Passing no value within the initializer: 
int arr[ 5 ] = {  };


2. By passing specific values within the initializer:

int arr[ 5 ] = { 1 , 2 , 3 , 4 , 5 };


Note: The count of elements within the “{ }”, must be less than the size of the array 

If the count of elements within the “{ }” is less than the size of the array, the remaining positions are considered to be ‘0’.
int arr[ 5 ] = { 1 , 2 , 3 } ;

3. By passing specific values within the initializer but not declaring the size:
int arr[  ] = { 1 , 2 , 3 , 4 , 5 };


4. Universal Initialization: After the adoption of universal initialization in C++, one can avoid using the equals sign between the declaration and the initializer. 
Syntax:
int arr[ ]  { 1 , 2 , 3 , 4 , 5 };

Designated Initializer: This initializer is used when we want to initialize a range with the same value. This is used only with GCC compilers.
[ first . . . last ] = value;
int num[5]={ [0 . . . 4 ] = 3 };               // num = { 3, 3, 3, 3, 3}

From <https://www.geeksforgeeks.org/different-ways-to-initialize-all-members-of-an-array-to-the-same-value-in-c/> 
